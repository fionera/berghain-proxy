global
    log stdout format raw local0

defaults
    mode http
    log global
    timeout client 5s
    timeout server 5s
    timeout connect 5s
    option httplog

resolvers host_dns
    parse-resolv-conf

frontend frontend
    bind *:8080
    log-format "%ci:%cp\ [%t]\ %ft\ %b/%s\ %Th/%Ti/%TR/%Tq/%Tw/%Tc/%Tr/%Tt\ %ST\ %B\ %CC\ %CS\ %tsc\ %ac/%fc/%bc/%sc/%rc\ %sq/%bq\ %hr\ %hs\ %{+Q}r\ %ID spoa-error:\ %[var(txn.berghain.error)]"

    # Override src with x-forwarded-for header
    http-request set-src hdr(X-Forwarded-For) if { str("$X_FORWARD_FOR") -m str str("true") }

    http-request track-sc1 src table st_src

    filter spoe engine berghain config /usr/local/etc/haproxy/berghain.conf

    # If more than 30 requests in 10s set to level 1.
    http-request set-var(req.berghain.level) int(1) if { sc1_http_req_rate gt 30 }

    # Disable for user-agent git/
    acl is_git req.hdr(user-agent) -i -m reg "^git\/.+"
    acl allow_git str("$ALLOW_GIT") -m str str("true")
    http-request unset-var(req.berghain.level) if is_git allow_git

    acl berghain_active var(req.berghain.level) -m found

    acl berghain_path capture.req.uri,url_dec -i -m reg "^\/+cdn-cgi\/challenge-platform\/+"
    http-request send-spoe-group berghain validate if !berghain_path berghain_active
    http-request return status 501 if { var(txn.berghain.error) -m found }

    acl berghain_valid var(txn.berghain.valid) -m bool

    http-request return status 403 content-type "text/html" file "/berghain/index.html" if !berghain_valid !berghain_path berghain_active
    use_backend berghain_http if berghain_path

    default_backend app_backend

backend st_src
    stick-table type ipv6 size 1m expire 15m store http_req_rate(10s)

backend app_backend
    http-request set-var(txn.backend_port) str("$BACKEND_PORT")
    http-request set-var(txn.backend_port) int(80) if { var(txn.backend_port) -m str str("") }

    http-request set-var(txn.backend_host) str("$BACKEND_HOST")
    acl backend_host_is_ip var(txn.backend_host) -m ip 0.0.0.0/0 ::/0
    http-request set-var(txn.backend_ip) var(txn.backend_host) if backend_host_is_ip
    http-request do-resolve(txn.backend_ip,host_dns) var(txn.backend_host) if !backend_host_is_ip

    http-request return status 503 lf-string "could not resolve: %[var(txn.backend_host)]" content-type text/plain if !{ var(txn.backend_ip) -m found }

    http-request set-dst var(txn.backend_ip)
    http-request set-dst-port var(txn.backend_port)

    server clear 0.0.0.0:0

backend berghain_http
    mode http
    filter spoe engine berghain config /usr/local/etc/haproxy/berghain.conf

    acl is_challenge_path path,url_dec -i -m reg "^/+cdn-cgi/challenge-platform/challenge\$"

    http-request send-spoe-group berghain challenge if is_challenge_path
    http-request return status 501 if { var(txn.berghain.error) -m found }

    acl has_token var(txn.berghain.token) -m found

    http-after-response add-header set-cookie "berghain=%[var(txn.berghain.token)]; path=/;" if has_token
    http-request return status 200 content-type "application/json" lf-string "%[var(txn.berghain.response)]" if is_challenge_path

    http-request return status 404

backend berghain_spop
    mode tcp
    option spop-check
    server localhost unix@./spop.sock check
